BANCO DE DADOS

links:
https://dev.mysql.com/doc/index-other.html

# DBMS ( DataBase Managment Software )

São os softwares que utilizamos para gerenciar importações backups, entre outras coisas.
Alguns conhecidos são o MYSQL, POSTGREE, ORACLE.

Iremos utilizar o MySQL



# INSTALAÇÃO

- 1 Vamos fazer o download do MySQL Community 
- 2 Iremos instalar de foma customizada, na seleção de produtos iremo selecionar o MySQL Server, MySQL Workbench e MySQL Shell



TABELAS
As tabelas possuem Colunas:
	-	-
	-	-
	-	-
	-	-
	-	-

Linhas:
--------------------------

PrimaryKey:
		Id: PK

Dados:
		Pedro



# TABELAS RALACIONAIS
É quando duas tabelas se relacionam para compartilhar informações, são conhecidas como ForeingKey




# USE e SELECT
São queries que fazemos para um banco de dados

- USE sakila;      -> Significa que vamos utilizar o schema Sakila

- SELECT actor_id FROM actor;        -> Selecionamos a coluna actor_id da tabela actor

- SELECT * FROM actor;        -> Selecionamos tudo da tabela actor

- SELECT actor_id,first_name FROM actor;      -> Selecionamos actor_id e first_name da tabela actor




# WHERE
Significa que iremos passar algumas condições de solicitação de dados

SELECT * FROM actor where actor_id < 10;     -> Selecionamos os dados onde o actor_id for menor que 10

SELECT * FROM actor where actor_id between 10 and 20;    -> Selecionamos os dados entre o actor_id for 10 e 20




# ORDER BY
Aqui podemos organizar a forma como os dados serão mostrados pra nós

select * from payment ORDER BY amount desc;   -> Monstrara os dados na order do amount de forma decrescente

select * from payment ORDER BY amount asc;    -> Monstrara os dados na order do amount de forma crescente




# MODIFICANDO COLUNAS
Conseguimos manipular as colunas

select customer_id,amount, amount - (amount * 0.30) as discount
from payment
where customer_id = 2;    -> Aqui adicionamos uma coluna chamada discount com um desconto de 30% do valor de amount
			  OBS: Utilizamos as nome_coluna para criar o nome da nossa coluna



# IN
Aqui nós procuramos dados que tem os valores que passamos ao utilizar IN

select * from address where district in ('Texas', 'Oregon');     -> Irá buscar por dados que possuem os valores passados no distric





# LIKE
O operador like nós podemos filtar a partir de um determinado caractere

select * from actor where first_name like 'p%';     -> Pega todos os dados onde o fist_name inicia com P
						    OBS: Pode usar P maisculo ou p minusculo que o SQL não faz essa diferenciação
select * from actor where first_name like '%A';     -> Pega todos os dados onde o fist_name termina com A




# JOIN
Com JOIN nós podemos filtrar dados de mais de uma tabela ao mesmo tempo

select * from customer join payment on customer.customer_id = payment.payment_id;  
Seleciona todos os dados onde o customer_id e payment_id for iguais


select 
customer.customer_id,
customer.first_name,
customer.email,
payment.rental_id,
payment.amount
from customer
join payment on customer.customer_id = payment.payment_id;
Seleciona as colunas especificas pedidas e traz o valor delas




# ALIAS
Alias é uma abreviação

from customer cus     -> Esse cus é uma abreviação de customer





# INSERT INTO
Este comando insere uma linha de dados em nossa tabela

insert into language
values (default, 'Português', '2024-02-12 21:30:00');

Inseri os dados na tabela language    -> 7 | Português | 2024-02-12 21:30:00

Podemos tambem especificar as colunas

insert into language (language_id, name, last_update)
values (default, 'Português', '2024-02-12 21:30:00');


Adicionando varias colunas

insert into language (language_id, name, last_update)
values 
	(default, 'Português', '2024-02-12 21:30:00'),
	(default, 'Espanhol', '2024-02-12 21:30:00'),
	(default, 'Tailândes', '2024-02-12 21:30:00');


Adicionando dados em varias tabelas


# UPDATE
Update faz a atualização de um valor

update payment
set amount = 15.00
where payment_id = 1;        -> Atualiza o amount onde o payment_id for igual a 1


# DELETE
Deleta um valor

DELETE FROM payment
WHERE payment_id = 1001;     -> Atualiza o amount onde o payment_id for igual a 1001


# COPIANDO TABELA - BACKUP
Podemos copiar uma tabela por exemplo para fazer um backup

create table payment_backup as
select * from payment;





# FUNÇÕES
MAX(valor) - Retorna o valor máximo
SELECT MAX(amount) FROM payment

MIN(valor) - Retorna o valor minimo
SELECT MIN(amount) FROM payment

AVG(valor) - Retorna a média
SELECT AVG(amount) FROM payment

SUM(valor) - Retorna a soma
SELECT SUM(amount) FROM payment

COUNT(valor) - Retorna a quantidade de
SELECT COUNT(amount) FROM payment



# GROUP BY
Aqui conseguimos fazer agrupamentos de informações

SELECT 
	customer_id,
	SUM(amount) as total
FROM payment
GROUP BY customer_id        -> Cada customer_id terá sua soma detalhada


SELECT 
	cus.customer_id,
    	cus.first_name,
    	cus.last_name,
	SUM(amount) as total
FROM payment pay
JOIN customer cus USING(customer_id)          -> Using(valor) utiliza um valor como refencia
GROUP BY customer_id 
ORDER BY total DESC;




# HAVING
Conseguimos fazer um filtro dos dados utilizando o having ao inves do where

SELECT 
	cus.customer_id,
    cus.first_name,
    cus.last_name,
	SUM(amount) as total
FROM payment pay
JOIN customer cus USING(customer_id)
GROUP BY customer_id 
HAVING total >= 160             -> Aqui seleciono depois do código ja ter filtrado alguns valores
				e busco valor onde o total é maior que 160
ORDER BY total DESC;





# SUBQUERY
É utilizado quando temos que fazer mais de uma querie

SELECT *
FROM payment 
WHERE amount > (
	SELECT AVG(amount)
	FROM payment)     -> Irá retornar só valores acima da média de preços geral


select customer_id, first_name, last_name, email 
from customer 
where customer_id in (
	select customer_id
	from payment
	group by customer_id
	having count(*) > 35
);       -> Coletando informações em subqueries onde retornara valores de quem fez mais de
	 35 compras





# VIEWS
Podemos fazer uma vizualização no campo de Views do nosso Schema onde podemos
pegar nossos filtros de forma mais fácil

create view visualizar_maiores_compradores_35 as
select customer_id, first_name, last_name, email
from customer where customer_id in (
	select customer_id from payment
    group by customer_id
    having count(*) > 35
    )

Ao entrar em Views em nosso Schema, podemos acessar visualizar_maiores_compradores_35
e pegar os dados


OBS: sempre que for criar, podemos criar da seguinte maneira

CREATE OR REPLACE VIEW visualizar_maiores_compradores_35 as
select customer_id, first_name, last_name, email
from customer where customer_id in (
	select customer_id from payment
    group by customer_id
    having count(*) > 35
    )

Porque com o replace, caso a view ja exista, ele substitui ela





# STRING FUNCTIONS
Documentação de apoio: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

select trim('             carros')  -> por exemplo, remove todo esse espaço do lado
mas caso tivessemos usado o rtrim() ele só iria remover espaços que tivessme do lado
direito

select concat('Maça', 'Banana')  -> Junta as palavras MaçaBanana





# USUARIOS E ACESSOS

Como visualizar a tabela de usuarios:
SELECT * FROM mysql.user;


Como criar os usuários:
CREATE USER nome@dominio IDENTIFIED BY 'senha';
CREATE USER lucas@localhost IDENTIFIED BY '1234';


Como remover os usuários:
DROP USER nome@dominio;
DROP USER christian@localhost;


Alterando/Recuperando senha de usuário:
SET PASSWORD nome@dominio = 'novasenha';
SET PASSWORD leonardo@elorriagatec.com = '1234';


Como mostrar privilégios:
SHOW GRANTS FOR nome@dominio;


Como dar privilégios aos usuários:
GRANT SELECT, INSERT, UPDATE, DELETE ON rent_cars_br.* TO nome@dominio;
GRANT SELECT, INSERT, UPDATE, DELETE ON rent_cars_br.* TO lucas@localhost;



Criando um admin com super grants:
GRANT ALL PRIVILEGES ON *.* ou *nomedoschema* TO 'nome'@'dominio';
GRANT ALL PRIVILEGES ON *.* TO 'pedro'@'localhost';


Removendo privilégios:
REVOKE UPDATE ON schema.* FROM nome@dominio;
REVOKE UPDATE ON rent_cars_br.* FROM lucas@localhost
