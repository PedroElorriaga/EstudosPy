---Escrevendo o teste

Agora, escreveremos nosso primeiro teste com Pytest. Mas, antes de escrever o teste, 
precisamos criar um arquivo específico para eles. Na pasta tests, vamos criar um arquivo chamado 
test_app.py.

Por convenção, todos os arquivos de teste do pytest devem iniciar com um prefixo test_.py

Para testar o código feito com FastAPI, precisamos de um cliente de teste. A grande vantagem é 
que o FastAPI já conta com um cliente de testes no módulo fastapi.testclient com o objeto TestClient, 
que precisa receber nosso app como parâmetro:




---Estrutura de um teste
Para desvendar o método por trás da nossa abordagem, exploraremos uma estratégia conhecida como AAA, 
que divide o teste em três fases distintas: 
Arrange, Act, Assert

Fase 1 - Organizar (Arrange)
Nesta primeira etapa, estamos preparando o ambiente para o teste. No exemplo, a linha com o comentário 
Arrange não é o teste em si, ela monta o ambiente para que o teste possa ser executado. Estamos 
configurando um client de testes para fazer a requisição ao app.

Fase 2 - Agir (Act)
Aqui é a etapa onde acontece a ação principal do teste, que consiste em chamar o Sistema Sob Teste (SUT). 
No nosso caso, o SUT é a rota /, e a ação é representada pela linha response = client.get('/'). Estamos 
exercitando a rota e armazenando sua resposta na variável response. É a fase em que o código de testes 
executa o código de produção que está sendo testado. Agir aqui significa interagir diretamente com a parte 
do sistema que queremos avaliar, para ver como ela se comporta.

Fase 3 - Afirmar (Assert)
Esta é a etapa de verificar se tudo correu como esperado. É fácil notar onde estamos fazendo a verificação, 
pois essa linha sempre tem a palavra reservada assert. A verificação é booleana, ou está correta, ou não 
está. Por isso, um teste deve sempre incluir um assert para verificar se o comportamento esperado está correto.

