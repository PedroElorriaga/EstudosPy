FastAPI é um framework Python com ofoco em desenvolvimento de 
API´s

# REST E RESTFUL
A arquitetura REST é refere-se a uma abstração da arquitetura 
da Web. Basicamente, o REST consiste em princípios e/ou regras 
que, quando seguidas, permitem a criação de um projeto com 
interfaces bem definidas, permitindo, que aplicações se comuniquem.

REST: conjunto de princípios de arquitetura
RESTful: capacidade de determinado sistema aplicar os princípios de REST.



# URIs
URIs são endpoints ex: http://sitepedrinho/api/v1/'produtos' -> Produtos é um endpoints

Um endpoint pode representar uma coleção de registros ou um registro individual
Ex:
/api/v1/produtos -> coleção
/api/v1/produtos/41 -> individual



# REQUESTS DE ENDPOINT
Podemos mudar os aspectos da nossa requisição para que possamos alterar as formas
das respostas que serão enviadas pelo servidor http
Ex:
/api/v1/produtos?order=desc&limit=10

Tudo que está após o símbolo de interrogação (?) são conjuntos de pares Chave / Valor
que podem ser utilizadas pela API para alterar os dados de acordo com estes parâmetros
(?order=desc&limit=10)



# HTTP STATUS CODES
1XX -> Informational
2XX -> Sucess
3XX -> Redirection
4XX -> Client Error
5XX -> Server Error




# SEGURANÇA SOBRE API
É entender tudo que envolve a autenticação e autorização
para administrar isso nós utilizamos os tokens

Autorização:
é o que você pode fazer

Autenticação:
é quem você é



# 1 INSTALANDO FASTAPI
$- pip install fastapi

instalaremos também o uvicorn, que é um framework
baseado em asyncio, é parecido com nodemon

$- pip install uvicorn



# 2 INSTANCIANDO O FASTAPI
Para isso podemos usar o documento main.py como exemplo
o nome que usamos para guardar a instancia, sera o decorator que
utilizara a requisição



# 3 RODAR O SERVER
Executaremos o UVICORN para executar o Server

$- uvicorn nome_arquivo:app --reload -> para executar no modo listerning
qualquer alteração que fizer, autmoaticamente ele atualiza o servidor

Ou apenas precisaremos configurar o uvicorn no arquivo de código,
igual no exemplo main.py

DICA: Caso queira deixar o servidor disponivel no seu ip, para que outros dipositivos
conectados na mesma rede consigam acessar, podemos usar o host='0.0.0.0' e quando for
conectar, devemos usar o IP da máquina host

DICA: Para acessar a documentação de sua API podemos acessar com http://localhost:8000/docs




# 4 PATH PARAMETERS
Primeiro devemos importar from fastapi import Path
O path parameter é o que vem após a /
EX: http://localhost:8000/cursos/path_parameter

Dentro dos parametros da função do HTTP request(GET, PUT....)
Devemos passar a seguinte informação get_curso(curso_id: int = Path(default=None, ..., ...))
EX: get_curso(curso_id: int = Path(default=None, title='ID do curso', description='Blá blá'))

CASE: vamos supor que o range do parametro precisa ser entre 1 E 2
get_curso(curso_id: int = Path(default=None, gt=0, lt=3)) gt=MAIOR QUE >  lt= MENOR QUE <





# 5 QUERY SELECTOR
O query selector são chave e valor que passamos na URI do link

/cursos/calculadora?a=1&b=2&c=10 

(?)É utilizado para passar os paremteros após o link
(&)É utilizado para separar os parametros

Assim como no Path, podemos usar o metodo Query

get_curso(a: int = Query(default=None, gt=0, lt=3)) gt=MAIOR QUE >  lt= MENOR QUE <




# 6 HEADERS
Traz algumas informações do header do site, como cookies, credenciais, tokens

get_curso(header: str = Header(default=Non))




# 7 INJEÇÃO DE DEPENDENCIAS
Injeção de dependencias são funções que precisam ser executadas antes de outra
função para que seja executada com sucesso

Exemplo: Uma função que abre a conexão com um banco de dados 