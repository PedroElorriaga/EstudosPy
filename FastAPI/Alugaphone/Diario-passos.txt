Dia 01

- Criei o ambiente virtual env-aluga
- Instalei o poetry e setuoptools no ambiente
- Iniciei o poetry dentro da estrutura
- Instalei as dependencias e bibliotecas usando poetry
- Configurei as ferramentas no arquivo .toml
- Criei a primeira rota '/' no arquivo app.py
- Criei o arquivo de schemas do projeto e configurei o PhonesStocks
- Criei o arquivo databases para criar a sessão com banco de dados
- Criei o arquivo settings para colocar as configurações do env em uma classe e ser instanciada quando preciso
- Criei o arquivo models e inseri a informação da tabela da base de dados do Phone Stocks
- Criei o arquivo conftest e configurei as fixtures client e session para efetuar futuros testes


Dia 02

- Criei o arquivo test_database.py para colocar os testes do banco de dados
- Ajustei as instalações do sqlalchemy, pydantic-settings e alembic no poetry, usando o poetry add
- Inicializei o alembic 


Dia 03

- Ajustei o migrations/env para o alembic acessar nossas configurações
- Travei um pouco nesta configuração, pois não tinha instanciado o config na hora de passar o env
- Testes funcionaram corretamente


DIA 04
alembic revision --autogenerate -m "create users table"
- Verifiquei a database.db utilizando o sqlite3 no cmd
- Apliquei a migração para o banco de dados utilizando o alembic, usando "alembic upgrade head"
- Criei um get no routes/phones.py
- Criei um novo schema que carrega uma lista do schema phonestocks
- Inclui o router na instancia do app
- Tentei rodar o teste do get, mas sem sucesso, me retornou somente assert status code 422


DIA 05

- Após varias tentativas, o erro estava em routes/phones, onde eu não tinha injetado as dependências (Depends)
- Testes funcionaram corretamente


DIA 06

- Criei a rota de post em routes/phones.py, para criar incluir o aparelho na database
- Testes funcionaram corretamente


DIA 07 

- Criei a rota de put em routes/phones.py, para atualizar um aparelho existente na database
- Instalei o factory_boy no pip e adicionei no poetry
- Criei uma classe para configurar o factory_boy com meu modelo do models.PhoneStock
- Criei uma fixture em conftests para criar um phone na base de dados
- Testes funcionaram corretamente


DIA 08

- Criei a rota de delete em routes/phones.py, para deletar um aparelho existente na database
- Criei um novo Schema chamado Message, onde carrega um json contendo uma mensagem
- Atualizei o response_model do method post e carreguei o Message, assim como no delete
- Testes funcionaram corretamente


DIA 09

- Criei testes para todos os methods no intuito de retornar os erros
- Testes funcionaram corretamente


DIA 10

- Alterei o nome de schemas/schema.py para schema/phone_schema.py
- Criei um novo schemas/user_schema.py e uma nova rota em routes/users.py
- Adicionei o modelo da base em models.py, para receber os users
- Criei um method get para buscar todos os usuarios existentes 
- Criei a migração usando o alembic com o seguinte comando, alembic revision --autogenerate -m "create_users_table"
- Fiz a atualização do schema na base de dados com o seguinte comando, alembic upgrade head
- Inclui o router de users em app.py
- Criei o teste para o method get de users
- Testes funcionaram corretamente
- Criei um user factory em conftest, para simular um usuario
- Criei o method post em routes e criei o teste de criação de usuário na base de dados
- Testes funcionaram corretamente


DIA 11 

- Criei um method put para atualizar os usuarios existentes
- Criei uma nova classe um user_schema, onde carrega o schema de updates
- Fiz um novo teste para rodar um update de um usuario existente
- Criado method delete para deletar usuarios existentes e testes para o mesmo
- Testes funcionaram corretamente


DIA 12

- Criei um novo user factory em conftest para executar futuros testes de segurança
- Feito instalações de duas bibliotecas para gerar tokens JWT e criptografar senhas, poetry add pyjwt "pwdlib[argon2]"
- Criamos o arquivo security, incluimos as bibliotecas de JWT e criptografia de senha, e configuramos a criação do token
- Criei teste de security e testes funcionaram corretamente
- Fiz alterações no models e migrei a alteração para o banco de dados
- Alterei o UserSchema em user_schemas para receber o email e senha do usuario
- Fiz alterações no teste de users no method post, aplicando a senha e email
- Alterei o router users para receber o email e senha, e deixei um valor padrão (True) na criação de usuarios em active_rental e active_account
- Em security crei uma função para hashear a senha, e outra para descriptografar a senha e verificar se são iguais
- Feito alterações em methods de routers onde uso senha, para fazer o hasheamento das senhas
- Testes funcionaram corretamente


DIA 13

- Criei schemas para token
- Instalei um recurso para utilizar formularios de solicitação de login (OAuth2PasswordRequestForm), poetry add python-multipart
- Atualizei o UserFactory no conftest e inclui um hasheamento de senha
- Criei um method post em auth.py para gerar um token quando o formulario de login for preenchido
- Atualizei o security.py, pois havia invertido o original_password e o hashed_password na descriptografia
- No UserFactory fizemos uma implementação de um monkey pacth, onde devemos passar a senha sem estar criptografada para fazer a verificação de senha
- Testes funcionaram corretamente


DIA 14

- Fiz uma alteração no UserUpdate no schemas.py onde retirei o uso do Optional, e usei o recurso de barra (|) para declarar que o campo é opcional
- Criei um novo TokenData em token_schema.py onde ira receber o Username/email quando verificarmos o usuário
- Em security.py fiz uma função para decodificar o token jwt do header e coleta as informações do usuario atualizar
- Atualizei o router de users.py para receber a verificação de token
- Criei uma fixture para pegar o token no user_factory
- Atualizamos os testes de update e delete no users, adicionando header para carregar o token
- Testes funcionaram corretamente


DIA 15

- Criei um teste em test_security.py, onde testa um token invalido e retorna o erro de nao ser valido
- Criei um schema em user_schema.py, para ser exibido sem a senha mas com o ID quando buscarmos na base de dados
- Alterei a rota que antes estava com o nome "/tokens" para "/token", no intuito de o formulario funcionar corretamente
- Alterei as configurações de security, onde passei informações como SECRET_KEY para o .env, alterando em todo codigo onde usei essas constantes 


DIA 16

- Criei testes para possiveis erros nas routes de users
- Atualizei o second_user_factory, para mudar o cpf quando for criado, para ter cpfs unicos
- Alterei a sequencia de verificacoes em users.py, para primeiro tentar buscar o usuario na base de dados e depois verificar o token
- Teste funcionaram corretamente


DIA 17

- Instalamos a biblioteca freezegun, onde podemos congelar o tempo em um ponto especifico e testar o token - poetry add --group dev freezegun
- Fiz um ajuste em security.py, adicionando e exception de SignatureError, para chamar o erro de credencial quando preciso
- Criei o teste de tempo expirado em test_security.py, onde avançamos o tempo com o freezegun e verificamos a expiração do token
- Criado testes de verificação de erros de senha e email incorretos
- Testes funcionaram corretamente


DIA 18

- Incui o Current_user em rotas de put, post e delete de phones, para ter a necessidade de autenticação quando for executado algo nessa rotas
- Atualizei os testes, incluindo os tokens para serem realizados como antes
- Testes funcionaram corretamente


DIA 19

- Criei um novo post em auth.py com complemento na rota /refresh_token, para fazer a renovação do token
- Criei dois novos testes para testar o recurso
- Testes funcionaram corretamente


DIA 20

- Ajustei algumas coisas no token, que irei detalhar
- Ajustei primeiro em auth.py na rota post em token_post, o sub que enviamos para o payload antes mandavamos com o email, agora enviamos o ID da base de dados em tipo de str
- Atualizamos tambem em auth.py a rota do refresh_token_post, o sub para ID em forma de str tambem
- Ajustei o security.py em get_current_token, para buscar na base de dados pelo ID


DIA 21

- Fiz a instalação do Docker e do WSL
- Iniciei as configurações do Docker
- Primeiro configuramos o arquivo Dockerfile que criamos no projeto, depois criaremos a imagem com as configurações definidas, -> (docker build -t 'tag_imagem' .)


DIA 22

- Fiz a execução da imagem do postgres utilizando docker
- Instalei o psycopg, para que o sqlalchemy suporte o postgresql
- No arquivo .env, alterei o database url direcionando para o contanier que criamos no docker
- Após essas configurações, agora migrei o banco de dados para um ambiente de contanei, -> (docker exec -it nome_contanier poetry run alembic upgrade head)
- Fiz o download do Dbeaver para ver se a estrutura foi migrada de forma correta para o banco de dados postgresql
- Criei um arquivo compose.yaml, contendo informações que permite definir e gerenciar aplicativos multi-contêiner com Docker
- Ativo o compose com o comando docker-compose up e desativo com o docker-compose down

